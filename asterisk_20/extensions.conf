;
; グローバル設定(変数類)
;
[globals]
;外線発信時の自局番号
MYNUMBER=0312345678
;外線発信時のトランク名
MYTRUNK=outbound-trunk
;PPIセット時のドメイン
PPIDOMAIN=ntt-east.ne.jp
;外線着信させる内線番号(カンマ区切り)
RINGPHONES=201,202

;
; メインのダイヤルプラン
;

[default]
;
;内線処理(1～9から始まる番号)
;
;内線はDBで抽象化されているので内線番号はDBに設定する
;例: database put MYPBX/EXT 201 phone1
;この設定では内線201はエンドポイントphone1となる
exten => _Z.,1,NoOp(内線)
;SIPメッセージングの場合の処理
exten => _X.,n,Set(MTARGET=${EXTEN})
exten => _X.,n,GotoIf($["${CHANNEL(name)}"="Message/ast_msg_queue"]?sipmsg,s,1)
;自局情報を取得してセット
exten => _Z.,n,Gosub(sub-whoami,s,1)
;内線番号が割り当たってなければ発信させない
exten => _Z.,n,GotoIf($["${MY_EXTEN}"=""]?nogo)
;内線番号に対応するエンドポイントをDBから取得
exten => _Z.,n,Set(TARGET=${DB(MYPBX/EXT/${EXTEN})})
;PJSIPのdial contactsに変換
;注意:ダイヤル先がREGISTERされていない場合でもCONTACTSは空になる
;(pjsip show contactsの結果を参照)
exten => _Z.,n,NoOp(${PJSIP_DIAL_CONTACTS(${TARGET})})
exten => _Z.,n,Set(TARGET=${PJSIP_DIAL_CONTACTS(${TARGET})})
;ターゲットが空(Dial先のエンドポイントがない)なら終了
exten => _Z.,n,GotoIf($["${TARGET}"=""]?nogo)
;Dialを実行
exten => _Z.,n,Dial(${TARGET})
exten => _Z.,n(nogo),Hangup

;
; 外線発信(プレフィクス0)
;
exten => _0.,1,NoOp(外線発信)
exten => _0.,n,Gosub(sub-whoami,s,1)
;内線番号が割り当たってなければ発信させない
exten => _0.,n,GotoIf($["${MY_EXTEN}"=""]?nogo)
exten => _0.,n,Set(CALLERID(num)=${MYNUMBER})
exten => _0.,n,Set(CALLERID(name)=${MYNUMBER})
exten => _0.,n,Dial(PJSIP/${EXTEN:1}@${MYTRUNK},,b(sub-addppi,s,1(${MYNUMBER})))
exten => _0.,n(nogo),Hangup

;
; 音声会議(39X)
;   内線に39Xを使う場合には注意
;
exten => _39X,1,NoOp(音声会議)
exten => _39X,n,Answer()
exten => _39X,n,Wait(1)
exten => _39X,n,ConfBridge(${EXTEN})
exten => _39X,n,Hangup


;
; 外線からの着信
; 注:トランクを設定する場合incoming contextに着信させ番号で落とすこと
;
[incoming]
;キャッチオール(どんな番号でも)する
exten => _X.,1,NoOp(外線着信)
;リストの位置カウンタを1に,リスト初期化
exten => _X.,n,Set(CNT=1)
exten => _X.,n,Set(D_LIST=)
;セーフティ:一定以上ループさせない
exten => _X.,n,While(CNT<33)
exten => _X.,n,Set(TMP_EXT=${CUT(RINGPHONES,\,,${CNT})})
;要素がなくなったらチェックへ
exten => _X.,n,GotoIf($["${TMP_EXT}"=""]?gochk)
;要素がある場合エンドポイント取得
exten => _X.,n,Set(TMP_ENDP=${DB(MYPBX/EXT/${TMP_EXT})})
;エンドポイントが存在しない場合にはループ継続へ
exten => _X.,n,GotoIf($["${TMP_ENDP}"=""]?cont)
;エンドポンとをPJSIPのDIAL CONTACTへ変換
exten => _X.,n,Set(TMP_ENDP=${PJSIP_DIAL_CONTACTS(${TMP_ENDP})})
;DIAL CONTACTがない場合にはループ継続へ
exten => _X.,n,GotoIf($["${TMP_ENDP}"=""]?cont)
;ダイヤルするリストに結合
exten => _X.,n,Set(D_LIST=${D_LIST}&${TMP_ENDP})
;カウンタをインクリメントして継続
exten => _X.,n(cont),Set(CNT=${INC(CNT)})
exten => _X.,n,EndWhile
;リストが空だったらダイヤルしない
exten => _X.,n(gochk),GotoIf($["${D_LIST}"=""]?nogo)
;リストの頭1文字は&が余計についているので削ってダイヤル.テクノロジ(PJSIP/)はすでに付いている
exten => _X.,n,Dial(${D_LIST:1})
exten => _X.,n(nogo),Hangup

;
; 外線着信(s着信)の前処理
;
[incoming-s]
exten => s,1,NoOp(外線s着信)
exten => s,n,Goto(incoming,${MYNUMBER},1)


;
; SIPメッセージング処理
;
[sipmsg]
exten => s,1,NoOp(メッセージング)
exten => s,n,NoOp(${MESSAGE(from)})
;Toの中身取り出し
exten => s,n,Set(MSGTO=${MESSAGE(to)})
exten => s,n,Set(DEST=${CUT(MSGTO,@,2)})
;エンドポイントから内線番号を求める
;Fromは内線番号を表示させるのでまずエンドポイント取得
exten => s,n,Set(MSGFRM=${CUT(MESSAGE(from),:,2)})
exten => s,n,Set(MSGFRM=${CUT(MSGFRM,@,1)})
;エンドポイントから内線を求める
exten => s,n,Gosub(sub-endpoint2ext,s,1(${MSGFRM}))
;Fromを内線番号でセット
exten => s,n,Set(MFROM=${T_EXTEN})
;変数で引き渡された送信先を取得
exten => s,n,Set(D_EXT=${MTARGET})
;MESSAGE(to)を内線番号ではなくエンドポイントにセットしなおす
exten => s,n,Set(D_ENDP=${DB(MYPBX/EXT/${D_EXT})})
;SIPメッセージングで送信
exten => s,n,MessageSend(pjsip:${D_ENDP},${MFROM},sip:${D_ENDP}@${DEST})
;送ったら切断
exten => s,n,Hangup


;
;サブルーチン類
;

;
;発信した側の内線番号を求める
; 内線を抽象化しているので発信した側の内線番号等がわからないためDBを参照させる
; DB総ナメで一致判断なためエンドポイント数を増やした場合この処理ではうまくない(負荷増)
;
[sub-whoami]
exten => s,1,NoOp(WHOAMI)
exten => s,n,Set(MY_EXTEN=)
;自局のエンドポイントを求める
exten => s,n,Set(MY_ENDP=${CHANNEL(endpoint)})
;エンドポイントから内線番号を得る
exten => s,n,Gosub(sub-endpoint2ext,s,1(${MY_ENDP}))
;内線が当たってない場合にはそのまま復帰
exten => s,n,GotoIf($["${T_EXTEN}"=""]?ret)
exten => s,n,Set(MY_EXTEN=${T_EXTEN})
;CIDを内線番号に設定
exten => s,n,Set(CALLERID(num)=${MY_EXTEN})
exten => s,n,Set(CALLERID(name)=${MY_EXTEN})
exten => s,n(ret),Return

;
; エンドポイントから内線番号を求める
; ARG1:内線番号
; T_EXTEN:求めた内線番号
;
[sub-endpoint2ext]
exten => s,1,NoOp(エンドポイントから内線)
exten => s,n,Set(T_EXTEN=)
;DB中の要素数をセットする
exten => s,n,Set(KCOUNT=${DB_KEYCOUNT(MYPBX/EXT)})
;DB中のキーをカンマ列挙で取得
exten => s,n,Set(DKEYS=${DB_KEYS(MYPBX/EXT)})
;キー数がゼロなら終了
exten => s,n,GotoIf($["${KCONT}"="0"]?ret)
;DBエントリをループ処理
exten => s,n,While(${KCOUNT}>0)
;カウンタ位置の内線番号を取得
exten => s,n,Set(TMP_EXT=${CUT(DKEYS,\,,${KCOUNT})})
;内線番号を自局と比較する
exten => s,n,GotoIf($["${ARG1}"="${DB(MYPBX/EXT/${TMP_EXT})}"]?match)
;カウンタを-1する
exten => s,n,Set(KCOUNT=${DEC(KCOUNT)})
exten => s,n,EndWhile()
;ここまでループした場合は内線登録なし
exten => s,n,Goto(ret)
;マッチした場合には変数をセット
exten => s,n(match),Set(T_EXTEN=${TMP_EXT})
exten => s,n(ret),Return


;
; 発信時PPI設定ルーチン
; ARG1 = PPIに設定する番号(自局番号)
; PPIDOMAINにSIPドメインを設定すること
;
[sub-addppi]
exten => s,1,NoOp(AddPPI)
exten => s,n,Set(PJSIP_HEADER(add,P-Preferred-Identity)=<sip:${ARG1}@${PPIDOMAIN}>)
exten => s,n,Return
